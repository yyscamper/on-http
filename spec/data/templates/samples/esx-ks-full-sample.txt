accepteula

clearpart --drives=t10.ATA_____32GB_SATA_Flash_Drive___________________B0614305800900000021 --overwritevmfs
install --disk=t10.ATA_____32GB_SATA_Flash_Drive___________________B0614305800900000021 --overwritevmfs

rootpw RackHDRocks!

# Search the networkDevices and set the first device (if defined) up.
# If no device is specified in the networkDevices, then we fallback
# to setting 'vmnic0' up as DHCP. The device can be specified with a
# MAC address or device name ('vmnic0' for example)
network --bootproto=static --device=vmnic1 --ip=192.168.1.29 --gateway=192.168.1.1 --netmask=255.255.255.0 --vlandid=104

reboot


%firstboot --interpreter=busybox
postLookup () {
    echo "Attempting postLookup operation on $1" >> /vmfs/volumes/datastore1/firstboot.log
    mac=`esxcli --debug --formatter=csv network ip interface list | grep $1 | awk -F, '{print $3}'`
    if [ "6.0" == "5.5" ]; then
        mac=`esxcli --debug --formatter=csv network ip interface list | grep $1 | awk -F, '{print $2}'`
    fi

    BODY="{"
    BODY=$BODY"\"macAddress\": \"$mac\","
    BODY=$BODY"\"ipAddress\": \"$2\","
    BODY=$BODY"\"node\": \"testNodeId\""
    BODY=$BODY"}"
    BODYLEN=$(echo -n ${BODY} | wc -c )
    echo ${BODY} >> /vmfs/volumes/datastore1/firstboot.log

    result=`echo -ne "POST /api/current/lookups HTTP/1.0\r\nHost: $2\r\nContent-Type: application/json\r\nContent-Length: ${BODYLEN}\r\n\r\n${BODY}" | nc -i 3  172.31.128.1 8080 | grep -oE 'HTTP/1.1 [0-9]{3}' | awk '{print $2}'`
    if [ "$result" -ge "400" ]; then
        # Make an attempt to PATCH if we can find the node id.  This is to handle the case where the
        # ARP poller added the lookup entry when we tried to POST above causing a collision.
        id=`wget http://172.31.128.1:8080/api/current/lookups?q=$2 -qO - | grep -oE '\"id\":\"(.)*\"'`
        if [ "$?" -eq "0" ]; then
            id=`echo $id | awk -F: '{gsub(/"/,"",$2); print $2}'`
            result=`echo -ne "PATCH /api/current/lookups/$id HTTP/1.0\r\nHost: $2\r\nContent-Type: application/json\r\nContent-Length: ${BODYLEN}\r\n\r\n${BODY}" | nc -i 3 172.31.128.1 8080 | grep -oE 'HTTP/1.1 [0-9]{3}' | awk '{print $2}'`
            echo "Patch result: $result to id: $id" >> /vmfs/volumes/datastore1/firstboot.log
        fi
    fi
    wget http://172.31.128.1:8080/api/current/lookups?q=$2 -qO - >> /vmfs/volumes/datastore1/firstboot.log
}


# enable VHV (Virtual Hardware Virtualization to run nested 64bit Guests + Hyper-V VM)
grep -i "vhv.enable" /etc/vmware/config || echo "vhv.enable = \"TRUE\"" >> /etc/vmware/config

vim-cmd hostsvc/enable_ssh
vim-cmd hostsvc/start_ssh
vim-cmd hostsvc/enable_esx_shell
vim-cmd hostsvc/start_esx_shell

#suppress shell warnings
esxcli system settings advanced set -o /UserVars/SuppressShellWarning -i 1

#Set the ESXi Shell Interactive idle time logout
esxcli system settings advanced set -o /UserVars/ESXiShellInteractiveTimeout -i 3600

# disable firewall
esxcli network firewall set --default-action false --enabled no

# set hostname and domain
esxcli system hostname set  --domain example.com --host rackhd-node

#config root account
echo ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDJQ631/sw3D40h/6JfA+PFVy5Ofz6eu7caxbv0zdw4fTJsrFcOliHZTEtAvqx7Oa8gqSC6d7v61M0croQxtt1DGUcH2G4yhfdZOlK4pr5McwtX0T/APACdAr1HtP7Bt7u43mgHpUG4bHGc+NoY7cWCISkxl4apkYWbvcoJy/5bQn0uRgLuHUNXxK/XuLT5vG76xxY+1xRa5+OIoJ6l78nglNGrj2V+jH3+9yZxI43S9I3NOCl4BvX5Cp3CFMHyt80gk2yM1BJpQZZ4GHewkI/XOIFPU3rR5+toEYXHz7kzykZsqt1PtbaTwG3TX9GJI4C7aWyH9H+9Bt76vH/pLBIn rackhd@rackhd-demo > /etc/ssh/keys-root/authorized_keys

#create users
/usr/lib/vmware/auth/bin/adduser -s /bin/sh -G root -h / -D rackhd1
echo  | passwd rackhd1 --stdin
mkdir /etc/ssh/keys-rackhd1
echo ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDJQ631/sw3D40h/6JfA+PFVy5Ofz6eu7caxbv0zdw4fTJsrFcOliHZTEtAvqx7Oa8gqSC6d7v61M0croQxtt1DGUcH2G4yhfdZOlK4pr5McwtX0T/APACdAr1HtP7Bt7u43mgHpUG4bHGc+NoY7cWCISkxl4apkYWbvcoJy/5bQn0uRgLuHUNXxK/XuLT5vG76xxY+1xRa5+OIoJ6l78nglNGrj2V+jH3+9yZxI43S9I3NOCl4BvX5Cp3CFMHyt80gk2yM1BJpQZZ4GHewkI/XOIFPU3rR5+toEYXHz7kzykZsqt1PtbaTwG3TX9GJI4C7aWyH9H+9Bt76vH/pLBIn rackhd@rackhd-demo > /etc/ssh/keys-rackhd1/authorized_keys

/usr/lib/vmware/auth/bin/adduser -s /bin/sh -G root -h / -D rackhd2
echo  | passwd rackhd2 --stdin

#setup ntp
cat > /etc/ntp.conf << __NTP_CONFIG__
restrict default kod nomodify notrap noquerynopeer
restrict 127.0.0.1 kkl,lkl
server 0.vmware.pool.ntp.org
server 1.vmware.pool.ntp.org
__NTP_CONFIG__
/sbin/chkconfig ntpd on

#enter maintenance mode
esxcli system maintenanceMode set -e true

#copy the first boot logs
cp /var/log/hostd.log "/vmfs/volumes/datastore1/firstboot-hostd.log"
cp /var/log/esxi_install.log "/vmfs/volumes/datastore1/firstboot-esxi_install.log"

#setup DNS
esxcli network ip dns search add --domain=example.com
esxcli network ip dns server add --server=172.12.88.91
esxcli network ip dns server add --server=192.168.20.77

#create vSwitches with uplinks. An uplink can be specifed with its MAC
#address or device name
esxcli network vswitch standard add -v "vSwitch0"

currdev = vmnic3
currsw=`esxcli --debug --formatter=csv network vswitch standard list | grep $currdev | awk -F, '{print $9}'`
if [ "$currsw" != "" ]; then
    esxcli network vswitch standard uplink remove -v $currsw -u $currdev
fi
esxcli network vswitch standard uplink add -v vSwitch0 -u $currdev

currdev = vmnic4
currsw=`esxcli --debug --formatter=csv network vswitch standard list | grep $currdev | awk -F, '{print $9}'`
if [ "$currsw" != "" ]; then
    esxcli network vswitch standard uplink remove -v $currsw -u $currdev
fi
esxcli network vswitch standard uplink add -v vSwitch0 -u $currdev

esxcli network vswitch standard add -v "vSwitch1"

currdev = vmnic0
currsw=`esxcli --debug --formatter=csv network vswitch standard list | grep $currdev | awk -F, '{print $9}'`
if [ "$currsw" != "" ]; then
    esxcli network vswitch standard uplink remove -v $currsw -u $currdev
fi
esxcli network vswitch standard uplink add -v vSwitch1 -u $currdev

currdev = 3c:62:1c:ad:d6:ab
currdev=`esxcli network nic list | grep 3c:62:1c:ad:d6:ab | cut -d ' ' -f 1`
currsw=`esxcli --debug --formatter=csv network vswitch standard list | grep $currdev | awk -F, '{print $9}'`
if [ "$currsw" != "" ]; then
    esxcli network vswitch standard uplink remove -v $currsw -u $currdev
fi
esxcli network vswitch standard uplink add -v vSwitch1 -u $currdev

currdev = vmnic1
esxcli network vswitch standard portgroup add -p $currdev.104 -v "vSwitch0"
esxcli network ip interface remove -i vmk0
esxcli network ip interface add -i vmk0 -p $currdev.104
esxcli network ip interface ipv4 set -i vmk0 -I 192.168.1.29 -N 255.255.255.0 -t static
esxcli network ip route ipv4 add -n default -g 192.168.1.1
esxcli network vswitch standard portgroup set -p $currdev.104 -v 104
postLookup vmk0 192.168.1.29
esxcli network vswitch standard portgroup add -p $currdev.105 -v "vSwitch0"
esxcli network ip interface remove -i vmk1
esxcli network ip interface add -i vmk1 -p $currdev.105
esxcli network ip interface ipv4 set -i vmk1 -I 192.168.1.29 -N 255.255.255.0 -t static
esxcli network ip route ipv4 add -n default -g 192.168.1.1
esxcli network vswitch standard portgroup set -p $currdev.105 -v 105
postLookup vmk1 192.168.1.29
esxcli network vswitch standard portgroup add -p $currdev.101 -v vSwitch0
esxcli network ip interface remove -i vmk2
esxcli network ip interface add -i vmk2 -p $currdev.101
esxcli network ip interface ipv6 address add -i vmk2 -I fec0::6ab4:0:5efe:157.60.14.21
esxcli network vswitch standard portgroup set -p $currdev.101 -v 101

currdev = 2c:60:0c:ad:d5:ba
currdev=`esxcli network nic list | grep 2c:60:0c:ad:d5:ba | cut -d ' ' -f 1`
esxcli network vswitch standard portgroup add -p $currdev -v vSwitch0
esxcli network ip interface remove -i vmk3
esxcli network ip interface add -i vmk3 -p $currdev
esxcli network ip interface ipv4 set -i vmk3 -I 192.168.11.89 -N 255.255.255.0 -t static
esxcli network ip route ipv4 add -n default -g 192.168.11.1
postLookup vmk3 192.168.11.89
esxcli network vswitch standard portgroup add -p $currdev -v vSwitch0
esxcli network ip interface remove -i vmk4
esxcli network ip interface add -i vmk4 -p $currdev
esxcli network ip interface ipv6 address add -i vmk4 -I fec0::6ab4:0:5efe:159.45.14.11

currdev = vmnic3
esxcli network vswitch standard portgroup add -p $currdev -v vSwitch0
esxcli network ip interface remove -i vmk5
esxcli network ip interface add -i vmk5 -p $currdev
esxcli network ip interface ipv4 set -i vmk5 -I 192.168.44.21 -N 255.255.255.0 -t static
esxcli network ip route ipv4 add -n default -g 192.168.44.1
postLookup vmk5 192.168.44.21

currdev = vmnic4
esxcli network vswitch standard portgroup add -p $currdev -v vSwitch0
esxcli network ip interface remove -i vmk6
esxcli network ip interface add -i vmk6 -p $currdev
esxcli network ip interface ipv6 address add -i vmk6 -I fec0::6ab4:0:5efe:159.45.14.31


echo This command will run at the end
echo of the post installation step
# signify ORA the installation completed, the 60s sleep is to wait for the LRU to timeout
# the stale entries that it latched prior to the lookups loading above being set.  Without
# the sleep, the completionUri hit below will not publish to the correct AMQP channel
sleep 60

# Download the service to callback to RackHD after OS installation/reboot completion
# %firstboot ends with a reboot, this script will run afterwards to signify completion
# of the installer and all reboot steps.
#
# The approved method for adding startup commands is to write to /etc/rc.local.d/local.sh,
# which is a pre-existing file with a sticky bit set by VisorFS. You can't just create new
# files and expect them to stick around, even if you set a sticky bit yourself.
# The /sbin/auto-backup.sh script will ensure the changes are persisted across reboots and
# MUST be executed after making any changes.
#
# See these links for more information:
# http://www.virtuallyghetto.com/2011/08/how-to-persist-configuration-changes-in.html
# http://blogs.vmware.com/vsphere/2011/09/how-often-does-esxi-write-to-the-boot-disk.html
# https://communities.vmware.com/message/1273849#1273849
#
# NOTE: this method only works for ESXi 5.1 or greater. For older versions, the changes
# must be written to /etc/rc.local instead.
#
# NOTE: this script will execute right away as a result of writing it to local.sh
# along with executing on every subsequent boot
wget http://172.31.128.1:8080/api/current/templates/esx-rackhdcallback.sh -O /etc/rc.local.d/local.sh

#backup ESXi configuration to persist it
/sbin/auto-backup.sh

#reboot the system after host configuration
esxcli system shutdown reboot -d 10 -r "Rebooting after first boot host configuration"
