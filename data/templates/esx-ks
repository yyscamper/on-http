accepteula
<% if (installDisk === "firstdisk") { %>
  clearpart --firstdisk --overwritevmfs
  install --firstdisk --overwritevmfs
<% } else { %>
  clearpart --drives=<%=installDisk%> --overwritevmfs
  install --disk=<%=installDisk%> --overwritevmfs
<% } %>
rootpw <%=rootPlainPassword%>

# Search the networkDevices and set the first vmnic# (if defined) up.
# If no vmnic# device is specified in the networkDevices, then we fallback
# to setting vmnic0 up as dhcp
<% if( undefined !== networkDevices ) { %>
  <% need_default = networkDevices.every(function(n) { %>
    <% if( n.device.substring(0,5) === 'vmnic' ) { %>
      <% if(typeof n.ipv4 !== 'undefined') { %>
        <% ipopts = '--ip=' + n.ipv4.ipAddr + ' --gateway=' + n.ipv4.gateway + ' --netmask=' + n.ipv4.netmask %>
        <% if (typeof n.ipv4.vlanId !== 'undefined' ) { %>
          <% ipopts += ' --vlandid=' + n.ipv4.vlanId[0] %>
        <% } %>
        network --bootproto=static --device=<%=n.device%> <%=ipopts%>
      <% } else { %>
        network --bootproto=dhcp --device=<%=n.device%>
      <% } %>
      <% return false; %>
    <% } %>
    <% return true; %>
  <% }); %>
  <% if (need_default) { %>
    network --bootproto=dhcp --device=vmnic0
  <% } %>
<% } %>
reboot

%firstboot --interpreter=busybox
# enable VHV (Virtual Hardware Virtualization to run nested 64bit Guests + Hyper-V VM)
grep -i "vhv.enable" /etc/vmware/config || echo "vhv.enable = \"TRUE\"" >> /etc/vmware/config

vim-cmd hostsvc/enable_ssh
vim-cmd hostsvc/start_ssh
vim-cmd hostsvc/enable_esx_shell
vim-cmd hostsvc/start_esx_shell

#suppress shell warnings
esxcli system settings advanced set -o /UserVars/SuppressShellWarning -i 1

#Set the ESXi Shell Interactive idle time logout
esxcli system settings advanced set -o /UserVars/ESXiShellInteractiveTimeout -i 3600

# disable firewall
esxcli network firewall set --default-action false --enabled no

# set hostname and domain
esxcli system hostname set --domain <%=domain%> --host <%=hostname%>

#config root account
<% if (typeof rootSshKey !== 'undefined') { %>
    echo <%=rootSshKey%> > /etc/ssh/keys-root/authorized_keys
<%} %>

#create users
<% users.forEach(function(user) { %>
    /usr/lib/vmware/auth/bin/adduser -s /bin/sh -G root -h / -D <%=user.name%>
    echo <%=user.plainPassword%> | passwd <%=user.name%> --stdin
    <% if (typeof user.sshKey !== 'undefined') { %>
        mkdir /etc/ssh/keys-<%=user.name%>
        echo <%=user.sshKey%> > /etc/ssh/keys-<%=user.name%>/authorized_keys
    <%} %>
<%}) %>

#setup ntp
cat > /etc/ntp.conf << __NTP_CONFIG__
restrict default kod nomodify notrap noquerynopeer
restrict 127.0.0.1 kkl,lkl
server 0.vmware.pool.ntp.org
server 1.vmware.pool.ntp.org
__NTP_CONFIG__
/sbin/chkconfig ntpd on

#backup ESXi configuration to persist it
/sbin/auto-backup.sh

#enter maintenance mode
esxcli system maintenanceMode set -e true

#copy the first boot logs
cp /var/log/hostd.log "/vmfs/volumes/datastore1/firstboot-hostd.log"
cp /var/log/esxi_install.log "/vmfs/volumes/datastore1/firstboot-esxi_install.log"
<% if( undefined !== dnsServers ) { %>
  esxcli network ip dns search add <%=domain%>
  <% dnsServers.forEach(function(dns) { %>
    esxcli network ip dns server add --server=<%= dns %>
  <% }); %>
<% } %>

<% if ( typeof switchDevices !== 'undefined' ) { %>
  <% switchDevices.forEach(function(n) { %>
    esxcli network vswitch standard add -v "<%=n.switchName%>"
    <% if( undefined !== n.uplinks ) { %>
      <% n.uplinks.forEach(function(s) { %>
        currsw=`esxcli --debug --formatter=csv network vswitch standard list | grep <%=s%> | awk -F, '{print $9}'`
        if [ "$currsw" != "" ]; then
          esxcli network vswitch standard uplink remove -v $currsw -u <%=s%>
        fi
        esxcli network vswitch standard uplink add -v <%=n.switchName%> -u <%=s%>
      <% }); %>
    <% } %>
  <% }); %>
<% } %>

<% vmkid = 0 %>
<% if( undefined !== networkDevices ) { %>
  <% networkDevices.forEach(function(n) { %>
    <% if( undefined !== n.ipv4 ) { %>
      <% if( undefined !== n.ipv4.vlanId ) { %>
        <% n.ipv4.vlanId.forEach(function(vid) { %>
          <% vmkname = 'vmk' + vmkid++ %>
          esxcli network vswitch standard portgroup add -p <%=n.device%>.<%=vid%> -v "<%= typeof n.esxSwitchName!='undefined' ? n.esxSwitchName : 'vSwitch0' %>"
          esxcli network ip interface remove -i <%=vmkname%>
          esxcli network ip interface add -i <%=vmkname%> -p <%=n.device%>.<%=vid%>
          esxcli network ip interface ipv4 set -i <%=vmkname%> -I <%=n.ipv4.ipAddr%> -N <%=n.ipv4.netmask%> -t static
          esxcli network ip route ipv4 add -n default -g <%=n.ipv4.gateway%> 
          esxcli network vswitch standard portgroup set -p <%=n.device%>.<%=vid%> -v <%=vid %>
        <% }); %>
      <% } else { %>
        <% vmkname = 'vmk' + vmkid++ %>
        esxcli network vswitch standard portgroup add -p <%=n.device%> -v <%= typeof n.esxSwitchName!='undefined' ? n.esxSwitchName : 'vSwitch0' %>
        esxcli network ip interface remove -i <%=vmkname%>
        esxcli network ip interface add -i <%=vmkname%> -p <%=n.device%>
        esxcli network ip interface ipv4 set -i <%=vmkname%> -I <%=n.ipv4.ipAddr%> -N <%=n.ipv4.netmask%> -t static
        esxcli network ip route ipv4 add -n default -g <%=n.ipv4.gateway%> 
      <% } %>
    <% } %>
    <% if( undefined !== n.ipv6 ) { %>
      <% if( undefined !== n.ipv6.vlanId ) { %>
        <% n.ipv6.vlanId.forEach(function(vid) { %>
          <% vmkname = 'vmk' + vmkid++ %>
          esxcli network vswitch standard portgroup add -p <%=n.device%>.<%=vid%> -v <%= typeof n.esxSwitchName!='undefined' ? n.esxSwitchName : 'vSwitch0' %>
          esxcli network ip interface remove -i <%=vmkname%>
          esxcli network ip interface add -i <%=vmkname%> -p <%=n.device%>.<%=vid%>
          esxcli network ip interface ipv6 address add -i <%=vmkname%> -I <%=n.ipv6.ipAddr%>
          esxcli network vswitch standard portgroup set -p <%=n.device%>.<%=vid%> -v <%=vid %>
        <% }); %>
      <% } else { %>
        <% vmkname = 'vmk' + vmkid++ %>
        esxcli network vswitch standard portgroup add -p <%=n.device%> -v <%= typeof n.esxSwitchName!='undefined' ? n.esxSwitchName : 'vSwitch0' %>
        esxcli network ip interface remove -i <%=vmkname%>
        esxcli network ip interface add -i <%=vmkname%> -p <%=n.device%>
        esxcli network ip interface ipv6 address add -i <%=vmkname%> -I <%=n.ipv6.ipAddr%>
      <% } %>
    <% } %>
    <% if( (undefined === n.ipv6) && (undefined === n.ipv4) ) { %>
      <% vmkname = 'vmk' + vmkid++ %>
      esxcli network vswitch standard portgroup add -p <%=n.device%> -v <%= typeof n.esxSwitchName!='undefined' ? n.esxSwitchName : 'vSwitch0' %>
      esxcli network ip interface remove -i <%=vmkname%>
      esxcli network ip interface add -i <%=vmkname%> -p <%=n.device%>
      esxcli network ip interface ipv4 set -i <%=vmkname%> -t dhcp
    <% } %>
  <% }); %>
<% } %>

<% if( typeof postInstallCommands !== 'undefined' ) { %>
  <% postInstallCommands.forEach(function(n) { %>
    <%=n%>
  <% }); %>
<% } %>

#signify ORA the installation completed
/usr/bin/wget --spider http://<%=server%>:<%=port%>/api/common/templates/renasar-ansible.pub

#reboot the system after host configuration
esxcli system shutdown reboot -d 10 -r "Rebooting after first boot host configuration"
